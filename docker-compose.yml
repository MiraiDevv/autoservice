services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - NODE_ENV=production
    mem_limit: 2g
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5173"]
      interval: 1m
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/autoservice
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - JAVA_OPTS=-Xmx512m -Xms256m
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 1m
      timeout: 10s
      retries: 3

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=autoservice
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  exporter:
    build: ./python-export
    ports:
      - "5000:5000"
    depends_on:
      - db
    volumes:
      - ./python-export:/app
    networks:
      - app-network
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: